// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: film.sql

package db

import (
	"context"
	"database/sql"
)

const createFilm = `-- name: CreateFilm :one
INSERT INTO film (name, yt_link, active, type) VALUES ($1, $2, $3, $4) RETURNING film_id, name, type, yt_link, active, created_at
`

type CreateFilmParams struct {
	Name   string         `json:"name"`
	YtLink sql.NullString `json:"yt_link"`
	Active string         `json:"active"`
	Type   sql.NullString `json:"type"`
}

func (q *Queries) CreateFilm(ctx context.Context, arg CreateFilmParams) (Film, error) {
	row := q.db.QueryRowContext(ctx, createFilm,
		arg.Name,
		arg.YtLink,
		arg.Active,
		arg.Type,
	)
	var i Film
	err := row.Scan(
		&i.FilmID,
		&i.Name,
		&i.Type,
		&i.YtLink,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFilm = `-- name: DeleteFilm :exec
DELETE FROM film WHERE film_id = $1
`

func (q *Queries) DeleteFilm(ctx context.Context, filmID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFilm, filmID)
	return err
}

const getFilm = `-- name: GetFilm :one
SELECT film_id, name, type, yt_link, active, created_at FROM film WHERE film_id = $1
`

func (q *Queries) GetFilm(ctx context.Context, filmID int64) (Film, error) {
	row := q.db.QueryRowContext(ctx, getFilm, filmID)
	var i Film
	err := row.Scan(
		&i.FilmID,
		&i.Name,
		&i.Type,
		&i.YtLink,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getFilmList = `-- name: GetFilmList :many
SELECT film_id, name, type, yt_link, active, created_at FROM film
`

func (q *Queries) GetFilmList(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Film{}
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.FilmID,
			&i.Name,
			&i.Type,
			&i.YtLink,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFilm = `-- name: UpdateFilm :one
UPDATE film SET 
name = $1, 
yt_link = $2, 
active = $3, 
type = $4
WHERE film_id = $5 RETURNING film_id, name, type, yt_link, active, created_at
`

type UpdateFilmParams struct {
	Name   string         `json:"name"`
	YtLink sql.NullString `json:"yt_link"`
	Active string         `json:"active"`
	Type   sql.NullString `json:"type"`
	FilmID int64          `json:"film_id"`
}

func (q *Queries) UpdateFilm(ctx context.Context, arg UpdateFilmParams) (Film, error) {
	row := q.db.QueryRowContext(ctx, updateFilm,
		arg.Name,
		arg.YtLink,
		arg.Active,
		arg.Type,
		arg.FilmID,
	)
	var i Film
	err := row.Scan(
		&i.FilmID,
		&i.Name,
		&i.Type,
		&i.YtLink,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
