// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (name, description, images_url, price, active, type_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING product_id, name, description, images_url, price, active, created_at, type_id
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImagesUrl   sql.NullString `json:"images_url"`
	Price       string         `json:"price"`
	Active      string         `json:"active"`
	TypeID      int32          `json:"type_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.ImagesUrl,
		arg.Price,
		arg.Active,
		arg.TypeID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.ImagesUrl,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.TypeID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, name, description, images_url, price, active, created_at, type_id FROM product WHERE product_id = $1
`

func (q *Queries) GetProduct(ctx context.Context, productID int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.ImagesUrl,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.TypeID,
	)
	return i, err
}

const getProductList = `-- name: GetProductList :many
SELECT product_id, name, description, images_url, price, active, created_at, type_id FROM product
`

func (q *Queries) GetProductList(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.ImagesUrl,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.TypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product SET 
name = $1, 
description = $2,
images_url = $3, 
price = $4,
active = $5, 
type_id = $6
WHERE product_id = $7 RETURNING product_id, name, description, images_url, price, active, created_at, type_id
`

type UpdateProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImagesUrl   sql.NullString `json:"images_url"`
	Price       string         `json:"price"`
	Active      string         `json:"active"`
	TypeID      int32          `json:"type_id"`
	ProductID   int64          `json:"product_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.ImagesUrl,
		arg.Price,
		arg.Active,
		arg.TypeID,
		arg.ProductID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.ImagesUrl,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.TypeID,
	)
	return i, err
}
